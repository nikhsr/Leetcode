class Trie {
public:
    /** Initialize your data structure here. */
    struct Trie* child[26];
    bool isEnd;
    Trie() {
        ios::sync_with_stdio(0);
        cin.tie(0);
        this->isEnd=false;
        for(int i=0;i<26;i++){
            this->child[i]=nullptr;
        }
    }
   
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        struct Trie *pnode=this;
        for(auto s:word){
            if(!pnode->child[s-'a'])
            {
                pnode->child[s-'a']=new Trie();
            }
            pnode=pnode->child[s-'a'];
        }
        pnode->isEnd=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        if(this==nullptr){return false;}
        Trie *curr=this;
        for(auto s:word){
            curr=curr->child[s-'a'];
            if(curr==nullptr){
                return false;
            }
        }
        return curr->isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        if(this==nullptr){return false;}
        Trie *curr=this;
        for(auto s:prefix){
            curr=curr->child[s-'a'];
            if(curr==nullptr){
                return false;
            }
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */